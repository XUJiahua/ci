name: build_electron_npm
env:
  DEBUG: napi:*
  APP_NAME: lwt-core-electron
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
on:
  repository_dispatch:
    types: [build_electron_npm]
jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: DEBUG variables from github.event.client_payload
        run: |
          echo "tag: ${{ github.event.client_payload.tag }}"
          echo "sha: ${{ github.event.client_payload.sha }}"
          echo "ref: ${{ github.event.client_payload.ref }}"
  build:
    defaults:
      run:
        working-directory: lwt-core-electron
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build --target aarch64-apple-darwin
              strip -x *.node
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lwtlab/lwt-core
          token: ${{ secrets.GH_PAT }}
          submodules: true
          ref: ${{ github.event.client_payload.ref }}
      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./lwt-core-electron/yarn.lock
      # required for deno
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./lwt-core-electron/yarn.lock
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/lwt-core-electron"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: lwt-core-electron/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    defaults:
      run:
        working-directory: lwt-core-electron
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lwtlab/lwt-core
          token: ${{ secrets.GH_PAT }}
          submodules: true
          ref: ${{ github.event.client_payload.ref }}
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./lwt-core-electron/yarn.lock
          registry-url: https://npm.pkg.github.com/
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: lwt-core-electron/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Pack packages
        run: bash pack.sh
        shell: bash
      - name: Setup ossutil
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: "oss-cn-shanghai.aliyuncs.com"
          access-key-id: ${{ secrets.OSS_ACCESS_KEY }}
          access-key-secret: ${{ secrets.OSS_SECRET_KEY }}
      - name: Upload to Oss
        shell: bash
        run: |
          if [ -z "${{ github.event.client_payload.tag }}" ]; then
            ossutil cp -r dist/ oss://lwt-dev/lwt-core/lwt-core-electron/`date -u +%Y%m%d%H%M%S`-${{ github.event.client_payload.sha }}/
          else
            ossutil cp -r dist/ oss://lwt-dev/lwt-core/lwt-core-electron/${{ github.event.client_payload.tag }}/
          fi
